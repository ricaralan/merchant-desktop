/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.merchant.views.configuration;

import com.merchant.components.tableModels.UsuarioTableModel;
import com.merchant.components.tableModels.MerchantTableModel;
import com.merchant.controllers.UsuarioController;
import com.merchant.pojos.Usuario;
import com.merchant.utils.Encriptation;
import com.merchant.utils.validate.ValidateFieldError;
import com.merchant.utils.validate.Validator;
import java.awt.Color;
import java.sql.Connection;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;

/**
 *
 * @author Eleazar
 */
public class UsuariosPanel extends AbstractConfigurationPanel {

    /**
     * Creates new form UsuariosForm
     */
    Connection connection = null;
    private UsuarioController usuarioController = null;
    private boolean crearUsuario;
    private int idActualizar;
    private JTable tableUsuarios;
    Encriptation encriptation = new Encriptation();

    public UsuariosPanel(Connection connection, JTable table) {;
        initComponents();
        this.connection = connection;
        usuarioController = new UsuarioController();
        crearUsuario = true;
        tableUsuarios = table;
        tableUsuarios.setModel(new UsuarioTableModel());
        initDataTable();

        lbAntiguaPassword.setVisible(false);
        lbAntiguaPassword.setVisible(false);
        lbNuevaPassword.setVisible(false);
        lbConfirmarPassword.setVisible(false);
        txtAntiguoPassword.setVisible(false);
        txtNuevoPassword.setVisible(false);
        txtConfirmarPassword.setVisible(false);
        btnNueva.setEnabled(false);
        
    }

    private void initDataTable() {
        getTableModel().initData(connection);
    }

    private MerchantTableModel getTableModel() {
        return ((MerchantTableModel) tableUsuarios.getModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opcionesEmpresa = new javax.swing.JPopupMenu();
        Editar = new javax.swing.JMenuItem();
        Eliminar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        txtNombre = new javax.swing.JTextField();
        lbNombre = new javax.swing.JLabel();
        lbPassword = new javax.swing.JLabel();
        btnNueva = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lbAntiguaPassword = new javax.swing.JLabel();
        btnOpcionForm = new javax.swing.JButton();
        lbNuevaPassword = new javax.swing.JLabel();
        lbConfirmarPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtAntiguoPassword = new javax.swing.JPasswordField();
        txtNuevoPassword = new javax.swing.JPasswordField();
        txtConfirmarPassword = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();

        Editar.setText("Editar");
        Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarActionPerformed(evt);
            }
        });
        opcionesEmpresa.add(Editar);

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });
        opcionesEmpresa.add(Eliminar);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos Usuario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.darkGray));

        lbNombre.setText("Nombre:");

        lbPassword.setText("Contrase単a");

        btnNueva.setText("Cambiar");
        btnNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lbAntiguaPassword.setText("Antigua Contrase単a");

        btnOpcionForm.setText("Crear");
        btnOpcionForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpcionFormActionPerformed(evt);
            }
        });

        lbNuevaPassword.setText("Nueva Contrase単a");

        lbConfirmarPassword.setText("Confirmar Contrase単a");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAntiguoPassword)
                            .addComponent(lbAntiguaPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNueva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtConfirmarPassword)
                            .addComponent(lbConfirmarPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpcionForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbNuevaPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNuevoPassword)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNombre)
                    .addComponent(lbPassword))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbAntiguaPassword)
                        .addGap(12, 12, 12)
                        .addComponent(txtAntiguoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbNuevaPassword)
                            .addComponent(lbConfirmarPassword))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNuevoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConfirmarPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOpcionForm, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Para m叩s opciones, selecciona una fila y presiona clic derecho");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarActionPerformed
    }//GEN-LAST:event_EditarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
    }//GEN-LAST:event_EliminarActionPerformed

    private void btnOpcionFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpcionFormActionPerformed
        if (validar()) {
            try {
                Usuario usuario = getDatosUsuario();
                if (crearUsuario) {
                    if (!new UsuarioController().create(connection, usuario)) {
                        JOptionPane.showMessageDialog(this, "Por favor intente m叩s tarde...",
                                "ERROR AL REGISTRAR", 1);
                    }
                } else {
                    if (!new UsuarioController().update(connection, usuario, 
                            idActualizar)) {
                        JOptionPane.showMessageDialog(this, "Por favor intente m叩s tarde...",
                                "ERROR AL ACTUALIZAR", 1);
                    } else {
                        crearUsuario = true;
                        btnOpcionForm.setText("Crear");
                        idActualizar = 0;
                    }
                }
                initDataTable();
                cleanDatosUsuarioForm();
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(parent, "Ha ocurrido un erro", "ERROR...", 1);
            }
        }
    }//GEN-LAST:event_btnOpcionFormActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        cleanDatosUsuarioForm();
        cleanDatosNewPassword();
        idActualizar = 0;
        btnOpcionForm.setText("Crear");
        crearUsuario = true;
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaActionPerformed
        Usuario usuario = getDatosNuevoPass();
        if (txtAntiguoPassword.getText().isEmpty() || txtNuevoPassword.getText().isEmpty()
                || txtConfirmarPassword.getText().isEmpty()) {
            JOptionPane.showMessageDialog(parent, "Es necesario llenar todos los campos",
                    "CAMPOS VACIOS", 1);
        } else {
            if (usuario.password.equals(usuario.old_password)) {
                if (usuario.new_password.equals(usuario.conf_password)) {
                    try {
                        if (!new UsuarioController().updatePassword(connection, 
                                usuario, idActualizar)) {
                            JOptionPane.showMessageDialog(this, "Por favor intente m叩s tarde...",
                                    "ERROR AL ACTUALIZAR", 1);
                        } else {
                            cleanDatosUsuarioForm();
                            cleanDatosNewPassword();
                            idActualizar = 0;
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(parent, "Ha ocurrido un error : " 
                                + e.getMessage(), "ERROR", 1);
                    }

                } else {
                    JOptionPane.showMessageDialog(parent, "La contrase単a nueva no coincide !",
                            "ERROR DE COINCIDENCIA", 1);
                }
            } else {
                JOptionPane.showMessageDialog(parent, "La contrase単a antigua no coincide !",
                        "ERROR DE COINCIDENCIA", 1);
            }
        }
    }//GEN-LAST:event_btnNuevaActionPerformed

    private synchronized Usuario getDatosNuevoPass() {
        Usuario usuario = new Usuario();
        usuario.nombre = txtNombre.getText();
        usuario.password = txtPassword.getText();
        usuario.old_password = txtAntiguoPassword.getText();
        usuario.new_password = txtNuevoPassword.getText();
        usuario.conf_password = txtConfirmarPassword.getText();
        return usuario;
    }

    private synchronized Usuario getDatosUsuario() {
        Usuario usuario = new Usuario();
        usuario.nombre = txtNombre.getText();
        usuario.password = txtPassword.getText();
        usuario.usu_status = 1;
        return usuario;
    }

    private synchronized void setDatosUsuarioForm(Usuario usuario) {
        cleanDatosUsuarioForm();
        txtNombre.setText(usuario.nombre);
        txtPassword.setText(encriptation.decrypt(usuario.password));
    }

    private void cleanDatosUsuarioForm() {
        txtNombre.setText("");
        txtPassword.setText("");
        txtPassword.setText("");
        txtAntiguoPassword.setText("");
        txtNuevoPassword.setText("");
        txtConfirmarPassword.setText("");
    }

    private void cleanDatosNewPassword() {
        lbNombre.setEnabled(true);
        lbPassword.setEnabled(true);
        txtNombre.setEditable(true);
        txtPassword.setEditable(true);
        btnOpcionForm.setEnabled(true);

        lbAntiguaPassword.setVisible(false);
        lbAntiguaPassword.setVisible(false);
        lbNuevaPassword.setVisible(false);
        lbConfirmarPassword.setVisible(false);
        txtAntiguoPassword.setVisible(false);
        txtNuevoPassword.setVisible(false);
        txtConfirmarPassword.setVisible(false);
        btnNueva.setEnabled(false);
    }

    @Override
    public boolean validar() {
        boolean valido = true;
        Usuario usuario = getDatosUsuario();
        Validator v = new Validator();
        List<ValidateFieldError> errors = v.validateFields(usuario);
        Border borderRED = BorderFactory.createLineBorder(Color.RED, 3);
        Border borderBlack = BorderFactory.createLineBorder(Color.yellow, 1);
        for (ValidateFieldError e : errors) {
            switch (e.fieldName) {
                case "nombre":
                    if (e.getErrors().size() > 0) {
                        txtNombre.setBorder(borderRED);
                        valido = false;
                    } else {
                        txtNombre.setBorder(borderBlack);
                    }
                    break;
                case "password":
                    if (e.getErrors().size() > 0) {
                        txtPassword.setBorder(borderRED);
                        valido = false;
                    } else {
                        txtPassword.setBorder(borderBlack);
                    }
            }
        }
        return valido;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Editar;
    private javax.swing.JMenuItem Eliminar;
    private javax.swing.JButton btnCancelar;
    public javax.swing.JButton btnNueva;
    public javax.swing.JButton btnOpcionForm;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JLabel lbAntiguaPassword;
    public javax.swing.JLabel lbConfirmarPassword;
    private javax.swing.JLabel lbNombre;
    public javax.swing.JLabel lbNuevaPassword;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JPopupMenu opcionesEmpresa;
    private javax.swing.JPasswordField txtAntiguoPassword;
    private javax.swing.JPasswordField txtConfirmarPassword;
    public javax.swing.JTextField txtNombre;
    private javax.swing.JPasswordField txtNuevoPassword;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables

    @Override
    public void eventEditFromJtable(int row) {
        Usuario usuario = (Usuario) ((MerchantTableModel) tableUsuarios.getModel())
                .getObjectByRow(row);
        setDatosUsuarioForm(usuario);
        btnOpcionForm.setText("Actualizar");
        idActualizar = usuario.id_usuario;
        crearUsuario = false;
        cleanDatosNewPassword();
    }

    @Override
    public void eventDelFromJtable(int row) {
        Usuario usuario = (Usuario) ((MerchantTableModel) tableUsuarios.getModel())
                    .getObjectByRow(row);
        if (usuario.id_usuario == idActualizar) {
            JOptionPane.showMessageDialog(this, "Este registro esta en edici坦n,"
                    + " \n finalize para poder eliminar ", "ERROR AL ELIMINAR", 1);
        } else {
            int res = JOptionPane.showConfirmDialog(this, "多Esta seguro de eliminar al Usuario \"" 
                    + usuario.nombre + "\"?");
            if (res == JOptionPane.OK_OPTION) {
                if (usuarioController.delete(connection, usuario.id_usuario)) {
                    ((UsuarioTableModel) tableUsuarios.getModel()).initData(connection);
                } else {
                    JOptionPane.showMessageDialog(this, "Por favor intente m叩s tarde...",
                            "ERROR AL ELIMINAR", 1);
                }
            }
            cleanDatosUsuarioForm();
            cleanDatosNewPassword();
        }
    }

    @Override
    public void eventNewPassFromJtable(int row) {
        lbNombre.setEnabled(false);
        lbPassword.setEnabled(false);
        txtNombre.setEditable(false);
        lbPassword.setEnabled(false);
        txtPassword.setEditable(false);
        btnOpcionForm.setEnabled(false);

        lbAntiguaPassword.setVisible(true);
        lbNuevaPassword.setVisible(true);
        lbConfirmarPassword.setVisible(true);
        txtAntiguoPassword.setVisible(true);
        txtNuevoPassword.setVisible(true);
        txtConfirmarPassword.setVisible(true);
        btnNueva.setEnabled(true);

        Usuario usuario = (Usuario) ((MerchantTableModel) tableUsuarios.getModel())
                .getObjectByRow(row);
        setDatosUsuarioForm(usuario);
        idActualizar = usuario.id_usuario;
    }
}
